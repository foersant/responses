{
  "$id": "coding-scheme@iqb-standard@1.0",
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "Response Scheme",
  "description": "Data structure to specify all processing steps of response data in order to get coded and scored data for analyses.",
  "type": "array",
  "items": {
    "type": "object",
    "properties": {
      "id": {
        "type": "string",
        "pattern": "^[0-9a-zA-Z_]+$",
        "description": "Identifier for the variable. In case of a scheme for a base variable, this id is identical with the source variable's id. In case of derivation, the processing data create a new derived variable. All ids of a response scheme should be unique."
      },
      "label": {
        "type": "string",
        "description": "Some additional info for UI"
      },
      "sourceType": {
        "type": "string",
        "enum": [
          "BASE", "COPY_VALUE", "CONCAT_CODE", "SUM_CODE", "SUM_SCORE"
        ],
        "description": "CONCAT means concatenate all source codes as string with delimiter '_', SUM calculates a sum from all source codes or scores."
      },
      "deriveSources": {
        "type": "array",
        "items": {
          "type": "string",
          "pattern": "^[0-9a-zA-Z_]+$"
        }
      },
      "processing": {
        "type": "array",
        "items": {
          "type": "string",
          "enum": [
            "IGNORE_CASE",
            "REMOVE_WHITE_SPACES",
            "REPLAY_REQUIRED",
            "ATTACHMENT"
          ]
        },
        "description": "This parameter defines what (pre)processing should be done."
      },
      "fragmenting": {
        "type": "string",
        "description": "Regular expression to get fragments out of the value if of type string"
      },
      "manualInstruction": {
        "type": "string",
        "description": "Instructions for manual coding."
      },
      "codeModel": {
        "type": "string",
        "enum": [
          "NONE",
          "CHOICE",
          "VALUE_LIST",
          "NUMBER",
          "MANUAL"
        ],
        "description": "Info for applications to simplify UI"
      },
      "codeModelParameters": {
        "type": "array",
        "items": {
          "type": "string"
        }
      },
      "codes": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "id": {
              "oneOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "description": "If this code's rules/instructions match, the code and score is taken for the response. If the code id is of value 'null', no code or score is taken. Instead, the status 'INVALID' will be set."
            },
            "label": {
              "type": "string"
            },
            "score": {
              "type": "integer"
            },
            "manualInstruction": {
              "type": "string",
              "description": "Instructions for manual coding."
            },
            "ruleSetOperatorAnd": {
              "type": "boolean",
              "description": "If true, all rule sets must match to take that code. Otherwise (default: false), one matching rule set will satisfy."
            },
            "ruleSets": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "valueArrayPos": {
                    "type": "integer",
                    "description": "Refers to a specific position in the value array [0..n] or to any position -1."
                  },
                  "ruleOperatorAnd": {
                    "type": "boolean",
                    "description": "If true, all rules must match to take that code. Otherwise (default: false), one matching rule will satisfy."
                  },
                  "rules": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "fragment": {
                          "type": "integer",
                          "description": "Refers to a specific fragment of the value [0..n] or to any -1."
                        },
                        "method": {
                          "type": "string",
                          "description": "See separate documentation",
                          "enum": [
                            "MATCH",
                            "MATCH_REGEX",
                            "NUMERIC_MATCH",
                            "NUMERIC_RANGE",
                            "NUMERIC_LESS_THEN",
                            "NUMERIC_MORE_THEN",
                            "NUMERIC_MAX",
                            "NUMERIC_MIN",
                            "IS_EMPTY",
                            "ELSE",
                            "IS_NULL",
                            "IS_TRUE",
                            "IS_FALSE"
                          ]
                        },
                        "parameters": {
                          "type": "array",
                          "description": "Depending on the method, additional parameter(s) is needed. See separate documentation",
                          "items": {
                            "type": "string"
                          }
                        }
                      },
                      "required": ["method"]
                    }
                  }
                },
                "required": ["rules"]
              }
            }
          },
          "required": [
            "id"
          ]
        }
      }
    },
    "required": [
      "id", "sourceType"
    ]
  }
}
